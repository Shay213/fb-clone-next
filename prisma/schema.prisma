// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  email          String   @unique
  hashedPassword String
  birthday       DateTime
  picture        String?
  cover          String?
  gender         Gender
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  posts                    Post[]         @relation("author")
  sendedNotifications      Notification[] @relation(name: "sender")
  receivedNotificationsIDs String[]       @db.ObjectId
  receivedNotifications    Notification[] @relation(fields: [receivedNotificationsIDs], references: [id], name: "receiver")
  friendOf                 User[]         @relation("UserFollows", fields: [friendOfIDs], references: [id])
  friendOfIDs              String[]       @db.ObjectId
  friends                  User[]         @relation("UserFollows", fields: [friendsIDs], references: [id])
  friendsIDs               String[]       @db.ObjectId
  likedPostsIDs            String[]       @db.ObjectId
  likedPosts               Post[]         @relation("likes", fields: [likedPostsIDs], references: [id])
  comments                 Comment[]      @relation("postedBy")
  likedCommentsIDs         String[]       @db.ObjectId
  likedComments            Comment[]      @relation("commentsLikes", fields: [likedCommentsIDs], references: [id])
  conversationsIDs         String[]       @db.ObjectId
  conversations            Conversation[] @relation(fields: [conversationsIDs], references: [id])
  messages                 Message[]
  seenNotificationsIDs     String[]       @db.ObjectId
  seenNotifications        Notification[] @relation(name: "seenBy", fields: [seenNotificationsIDs], references: [id])
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  audience    Audience
  img         String?
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author     User      @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  likedByIDs String[]  @db.ObjectId
  likedBy    User[]    @relation("likes", fields: [likedByIDs], references: [id])
  comments   Comment[]
}

model Notification {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  senderId     String           @db.ObjectId
  sender       User             @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiversIds String[]         @db.ObjectId
  receivers    User[]           @relation(name: "receiver", fields: [receiversIds], references: [id])
  new          Boolean          @default(true)
  read         Boolean          @default(false)
  seenByIds    String[]         @db.ObjectId
  seenBy       User[]           @relation(name: "seenBy", fields: [seenByIds], references: [id])
  type         NotificationType
  createdAt    DateTime         @default(now())
}

model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  postedByID    String    @db.ObjectId
  postedBy      User      @relation("postedBy", fields: [postedByID], references: [id], onDelete: Cascade)
  postId        String    @db.ObjectId
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  likedByIDs    String[]  @db.ObjectId
  likedBy       User[]    @relation("commentsLikes", fields: [likedByIDs], references: [id])
  rootCommentID String?   @db.ObjectId
  rootComment   Comment?  @relation("replies", fields: [rootCommentID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Comment[] @relation("replies")
  createdAt     DateTime  @default(now())
}

model Conversation {
  id           String    @id @map("_id") @db.ObjectId
  messages     Message[]
  usersPairIDs String[]  @db.ObjectId
  usersPair    User[]    @relation(fields: [usersPairIDs], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  description    String
  sendedByID     String       @db.ObjectId
  sendedBy       User         @relation(fields: [sendedByID], references: [id])
  conversationID String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationID], references: [id])
  createdAt      DateTime     @default(now())
  read           Boolean      @default(false)
}

enum NotificationType {
  FRIEND_REQUEST
  REMOVED_FROM_FRIENDS
  FRIEND_NEW_POST
}

enum Gender {
  MALE
  FEMALE
}

enum Audience {
  PUBLIC
  FRIENDS
  ONLY_ME
}
